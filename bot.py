import os
import json
import logging
import random
import re
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
import drinks  # drinks.yaml –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ drinks.py

# –ó–∞–≥—Ä—É–∂–∞–µ–º drinks.json
BASE_PATH = os.path.dirname(__file__)
JSON_PATH = os.path.join(BASE_PATH, "drinks.json")

# –ß–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ —Å \ –∏ –ø–∞—Ä—Å–∏–º

with open(JSON_PATH, "r", encoding="utf-8") as f:
    content = f.read()
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ \, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º–∏ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
    content = re.sub(r'\\(?![ntr"\\/bfu])', r'\\\\', content)
    DRINKS = json.loads(content)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# --- –ö–æ–º–∞–Ω–¥—ã ---

async def log_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command_name: str):
    user = update.effective_user
    logger.info(f"User {user.full_name} ({user.id}) called {command_name}")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/start")
    keyboard = [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã üìã", callback_data="show_commands")]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø DrinkAdvisorBot üçπ\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/help")
    await update.message.reply_text(
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/info <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ\n"
        "/recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –†–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—Ç–∫–∞\n"
        "/cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç> - –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n"
        "/random - –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫\n"
        "/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
    )


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/info")
    if context.args:
        name = " ".join(context.args)
        await update.message.reply_text(drinks.get_info(name))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞: /info <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


async def recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/recipe")
    if context.args:
        name = " ".join(context.args)
        await update.message.reply_text(drinks.get_recipe(name))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞: /recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


async def cocktails(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/cocktails")
    if context.args:
        ingredient = " ".join(context.args)
        await update.message.reply_text(drinks.search_by_ingredient(ingredient))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: /cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç>")


async def random_cocktail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/random")
    all_names = list(drinks.DRINKS.keys())
    choice = random.choice(all_names)
    await update.message.reply_text(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫: {choice}\n\n" + drinks.get_info(choice))


async def list_drinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/list")
    names = list(drinks.DRINKS.keys())
    await update.message.reply_text("üìã –í—Å–µ –Ω–∞–ø–∏—Ç–∫–∏:\n" + "\n".join(names))


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/stop")
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_commands":
        await query.message.reply_text(
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/info <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ\n"
            "/recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –†–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—Ç–∫–∞\n"
            "/cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç> - –ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n"
            "/random - –°–ª—É—á–∞–π–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫\n"
            "/list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤\n"
            "/help - –°–ø—Ä–∞–≤–∫–∞\n"
            "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
        )


# --- main ---

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("recipe", recipe))
    app.add_handler(CommandHandler("cocktails", cocktails))
    app.add_handler(CommandHandler("random", random_cocktail))
    app.add_handler(CommandHandler("list", list_drinks))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
