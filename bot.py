import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from dotenv import load_dotenv
import os
from drinks import get_info, get_recipe, get_by_ingredient, get_random  # ‚úÖ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ

load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø DrinkAdvisorBot üçπ\n"
        "–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
    )


# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/info <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ\n"
        "/recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –†–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—Ç–∫–∞\n"
        "/cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç> - –ö–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n"
        "/random - –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
    )


# /info
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        drink = ' '.join(context.args)
        await update.message.reply_text(get_info(drink))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞: /info <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


# /recipe
async def recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        drink = ' '.join(context.args)
        await update.message.reply_text(get_recipe(drink))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: /recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


# /cocktails
async def cocktails(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args:
        ingredient = ' '.join(context.args)
        await update.message.reply_text(get_by_ingredient(ingredient))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: /cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç>")


# /random
async def random_cocktail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(get_random())


# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")


# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("recipe", recipe))
    app.add_handler(CommandHandler("cocktails", cocktails))
    app.add_handler(CommandHandler("random", random_cocktail))
    app.add_handler(CommandHandler("stop", stop))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
