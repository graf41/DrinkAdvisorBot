import os
import logging
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

from drinks import get_info, get_recipe, get_by_ingredient, get_random, get_all_drinks

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# –õ–æ–≥ –∫–æ–º–∞–Ω–¥—ã
async def log_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command_name: str):
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} ({user.id}) –≤–≤—ë–ª –∫–æ–º–∞–Ω–¥—É: {command_name}")


# /start —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/start")
    keyboard = [[InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã üìã", callback_data="show_commands")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø DrinkAdvisorBot üçπ\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:",
        reply_markup=reply_markup
    )


# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/help")
    await update.message.reply_text(
        "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/info <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ\n"
        "/recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –†–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—Ç–∫–∞\n"
        "/cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç> - –ö–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n"
        "/random - –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏\n"
        "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
    )


# /info
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/info")
    if context.args:
        drink = ' '.join(context.args)
        await update.message.reply_text(get_info(drink))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–∞: /info <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


# /recipe
async def recipe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/recipe")
    if context.args:
        drink = ' '.join(context.args)
        await update.message.reply_text(get_recipe(drink))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ: /recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ>")


# /cocktails
async def cocktails(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/cocktails")
    if context.args:
        ingredient = ' '.join(context.args)
        await update.message.reply_text(get_by_ingredient(ingredient))
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç: /cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç>")


# /random
async def random_cocktail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/random")
    await update.message.reply_text(get_random())


# /list
async def list_drinks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/list")
    await update.message.reply_text(get_all_drinks())


# /stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await log_command(update, context, "/stop")
    await update.message.reply_text("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "show_commands":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã' ‚Äî id: {query.from_user.id}")
        await query.message.reply_text(
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/info <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø–∏—Ç–∫–µ\n"
            "/recipe <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –†–µ—Ü–µ–ø—Ç –Ω–∞–ø–∏—Ç–∫–∞\n"
            "/cocktails <–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç> - –ö–æ–∫—Ç–µ–π–ª–∏ –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—É\n"
            "/random - –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–∫—Ç–µ–π–ª—å\n"
            "/list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏\n"
            "/stop - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"
        )


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("recipe", recipe))
    app.add_handler(CommandHandler("cocktails", cocktails))
    app.add_handler(CommandHandler("random", random_cocktail))
    app.add_handler(CommandHandler("list", list_drinks))
    app.add_handler(CommandHandler("stop", stop))

    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞
    app.add_handler(CallbackQueryHandler(button_handler))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
